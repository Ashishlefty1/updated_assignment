[{"C:\\CodeInspector\\Git\\front-end\\src\\index.js":"1","C:\\CodeInspector\\Git\\front-end\\src\\reportWebVitals.js":"2","C:\\CodeInspector\\Git\\front-end\\src\\App.js":"3","C:\\CodeInspector\\Git\\front-end\\src\\util\\useLocalStorage.js":"4","C:\\CodeInspector\\Git\\front-end\\src\\CodeReviewAssignmentView\\CodeReviewAssignmentView.js":"5","C:\\CodeInspector\\Git\\front-end\\src\\Homepage\\index.js":"6","C:\\CodeInspector\\Git\\front-end\\src\\PrivateRoute\\index.js":"7","C:\\CodeInspector\\Git\\front-end\\src\\Dashboard\\index.js":"8","C:\\CodeInspector\\Git\\front-end\\src\\AssignmentView\\index.js":"9","C:\\CodeInspector\\Git\\front-end\\src\\Login\\index.js":"10","C:\\CodeInspector\\Git\\front-end\\src\\CodeReviewerDashboard\\index.js":"11","C:\\CodeInspector\\Git\\front-end\\src\\Services\\fetchService.js":"12","C:\\CodeInspector\\Git\\front-end\\src\\StatusBadge\\index.js":"13","C:\\CodeInspector\\Git\\front-end\\src\\UserProvider\\index.js":"14","C:\\CodeInspector\\Git\\front-end\\src\\Comment\\index.js":"15","C:\\CodeInspector\\Git\\front-end\\src\\CommentContainer\\index.js":"16","C:\\CodeInspector\\Git\\front-end\\src\\util\\useInterval.js":"17"},{"size":720,"mtime":1692968579492,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1692369103604,"results":"20","hashOfConfig":"19"},{"size":2061,"mtime":1692984872562,"results":"21","hashOfConfig":"19"},{"size":458,"mtime":1692385435791,"results":"22","hashOfConfig":"19"},{"size":6143,"mtime":1693077511861,"results":"23","hashOfConfig":"19"},{"size":4825,"mtime":1693081083662,"results":"24","hashOfConfig":"19"},{"size":921,"mtime":1692967012682,"results":"25","hashOfConfig":"19"},{"size":2725,"mtime":1692969270058,"results":"26","hashOfConfig":"19"},{"size":7286,"mtime":1693076272921,"results":"27","hashOfConfig":"19"},{"size":3175,"mtime":1692969264032,"results":"28","hashOfConfig":"19"},{"size":7655,"mtime":1693078035421,"results":"29","hashOfConfig":"19"},{"size":539,"mtime":1692476526048,"results":"30","hashOfConfig":"19"},{"size":597,"mtime":1692958914213,"results":"31","hashOfConfig":"19"},{"size":605,"mtime":1692967701435,"results":"32","hashOfConfig":"19"},{"size":1945,"mtime":1693073073835,"results":"33","hashOfConfig":"19"},{"size":4027,"mtime":1693076503027,"results":"34","hashOfConfig":"19"},{"size":510,"mtime":1693076518308,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"bmq16k",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"39"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"39"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"39"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\CodeInspector\\Git\\front-end\\src\\index.js",[],[],[],"C:\\CodeInspector\\Git\\front-end\\src\\reportWebVitals.js",[],[],"C:\\CodeInspector\\Git\\front-end\\src\\App.js",["98"],[],"import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Homepage from \"./Homepage\";\r\nimport Login from \"./Login\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport AssignmentView from \"./AssignmentView\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport CodeReviewerDashboard from \"./CodeReviewerDashboard\";\r\nimport CodeReviewAssignmentView from \"./CodeReviewAssignmentView/CodeReviewAssignmentView\";\r\nimport {  useUser } from \"./UserProvider\";\r\n\r\nfunction App() {\r\n  // This will log \"Hello\" to the console when the component renders\r\n  //const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\r\n  const [roles, setRoles] = useState([]);\r\n  const user = useUser();\r\n\r\n  useEffect(()=>{\r\n    setRoles(getRolesFromJWT());\r\n  },[user.jwt]);\r\n\r\n  function getRolesFromJWT() {\r\n    if (user.jwt) {\r\n      const decodedJWT = jwt_decode(user.jwt);\r\n      return decodedJWT.authorities;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  return (\r\n    \r\n      <Routes>\r\n        <Route\r\n          path=\"/dashboard\"\r\n          element={\r\n            roles.find((role) => role === \"ROLE_CODE_REVIEWER\") ? (\r\n              <PrivateRoute>\r\n                <CodeReviewerDashboard />\r\n              </PrivateRoute>\r\n            ) : (\r\n              <PrivateRoute>\r\n                <Dashboard />\r\n              </PrivateRoute>\r\n            )\r\n          }\r\n        />\r\n        <Route\r\n          path=\"/assignments/:assignmentId\"\r\n          element={\r\n            roles.find((role) => role === \"ROLE_CODE_REVIEWER\") ? (\r\n              <PrivateRoute>\r\n                <CodeReviewAssignmentView />\r\n              </PrivateRoute>\r\n            ) : (\r\n              <PrivateRoute>\r\n                <AssignmentView />\r\n              </PrivateRoute>\r\n            )\r\n          }\r\n        ></Route>\r\n        <Route path=\"login\" element={<Login />} />\r\n        <Route path=\"/\" element={<Homepage />} />\r\n      </Routes>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\util\\useLocalStorage.js",[],[],"C:\\CodeInspector\\Git\\front-end\\src\\CodeReviewAssignmentView\\CodeReviewAssignmentView.js",["99","100","101","102","103","104","105","106","107","108"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLocalState } from \"../util/useLocalStorage\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport {\r\n  Badge,\r\n  Button,\r\n  ButtonGroup,\r\n  Col,\r\n  Container,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Form,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport StatusBadge from \"../StatusBadge\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CommentContainer from \"../CommentContainer\";\r\nimport { useUser } from \"../UserProvider\";\r\n\r\nconst CodeReviewAssignmentView = () => {\r\n  const navigate = useNavigate();\r\n  const user = useUser();\r\n  const id = window.location.href.split(\"/assignments/\")[1];\r\n  const [assignment, setAssignment] = useState({\r\n    branch: \"\",\r\n    githuburl: \"\",\r\n    number: null,\r\n    status: null,\r\n    codeReviewVideoUrl: null\r\n  });\r\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\r\n  const [assignmentEnums, setAssignmentEnums] = useState([]);\r\n  const [assignmentStatuses, setAssignmentStatuses] = useState([]);\r\n\r\n  const prevAssignmentValue = useRef(assignment);\r\n\r\n  function updateAssignment(prop, value) {\r\n    const newAssignment = { ...assignment };\r\n    newAssignment[prop] = value;\r\n    setAssignment(newAssignment);\r\n    //  console.log(assignment)\r\n  }\r\n\r\n  function save(status) {\r\n    if (status && assignment.status !== status) {\r\n      updateAssignment(\"status\", status);\r\n    } else {\r\n      persist();\r\n    }\r\n  }\r\n\r\n  function persist() {\r\n    ajax(`/api/assignments/${id}`, \"PUT\", user.jwt, assignment).then(\r\n      (assignmentData) => {\r\n        setAssignment(assignmentData);\r\n      }\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (prevAssignmentValue.current.status !== assignment.status) {\r\n      persist();\r\n    }\r\n    prevAssignmentValue.current = assignment;\r\n  }, [assignment]);\r\n  // function save() {\r\n  //   const updatedStatus = assignmentStatuses[1].status;\r\n  //   const updatedAssignment = assignment.status === assignmentStatuses[0].status\r\n  //     ? { ...assignment, status: updatedStatus }\r\n  //     : assignment;\r\n\r\n  //   ajax(`/api/assignments/${id}`, \"PUT\", jwt, updatedAssignment).then(\r\n  //     (assignmentData) => {\r\n  //       setAssignment(assignmentData);\r\n  //     }\r\n  //   );\r\n  // }\r\n\r\n  useEffect(() => {\r\n    ajax(`/api/assignments/${id}`, \"GET\", user.jwt).then((assignmentsResponse) => {\r\n      let assignmentData = assignmentsResponse.assignment;\r\n      if (assignmentData.branch === null) assignmentData.branch = \"\";\r\n      if (assignmentData.githuburl === null) assignmentData.githuburl = \"\";\r\n      setAssignment(assignmentData);\r\n      setAssignmentEnums(assignmentsResponse.assignmentEnum);\r\n      setAssignmentStatuses(assignmentsResponse.statusEnums);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => console.log(assignmentEnums), [assignmentEnums]);\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row className=\"d-flex align-items-center\">\r\n        <Col>\r\n          {assignment.number ? <h1>Assignment {assignment.number}</h1> : <></>}\r\n        </Col>\r\n        <Col>\r\n          <StatusBadge text={assignment.status} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {assignment ? (\r\n        <>\r\n          <Form.Group as={Row} className=\"my-3\" controlId=\"githuburl\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Github URL:\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <Form.Control\r\n                onChange={(e) => updateAssignment(\"githuburl\", e.target.value)}\r\n                type=\"url\"\r\n                readOnly\r\n                placeholder=\"http://github.com/username/repo-name\"\r\n                value={assignment.githuburl}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"branch\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Branch :\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <Form.Control\r\n                onChange={(e) => updateAssignment(\"branch\", e.target.value)}\r\n                type=\"text\"\r\n                readOnly\r\n                placeholder=\"example_branch_name\"\r\n                value={assignment.branch}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} className=\"my-3\" controlId=\"githuburl\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Video Review URL:\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <Form.Control\r\n                onChange={(e) =>\r\n                  updateAssignment(\"codeReviewVideoUrl\", e.target.value)\r\n                }\r\n                type=\"url\"\r\n                placeholder=\"http://screencast-o-matic.com/something\"\r\n                value={assignment.codeReviewVideoUrl}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <div className=\"d-flex gap-5\">\r\n            {assignment.status === \"Completed\" ? (\r\n              <Button\r\n                onClick={() => save(assignmentStatuses[2].status)}\r\n                variant=\"secondary\"\r\n              >\r\n                Re-Claim\r\n              </Button>\r\n            ) : (\r\n              <Button onClick={() => save(assignmentStatuses[4].status)}>\r\n                Complete Review\r\n              </Button>\r\n            )}\r\n\r\n            {assignment.status === \"Needs Update\" ? (\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => save(assignmentStatuses[2].status)}\r\n              >\r\n                Re-Claim\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={() => save(assignmentStatuses[3].status)}\r\n              >\r\n                Reject Assignment\r\n              </Button>\r\n            )}\r\n\r\n            <Button variant=\"secondary\" onClick={() => navigate(\"/dashboard\")}>\r\n              Back\r\n            </Button>\r\n          </div>\r\n          <CommentContainer assignmentId={id} />\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CodeReviewAssignmentView;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\Homepage\\index.js",["109"],[],"C:\\CodeInspector\\Git\\front-end\\src\\PrivateRoute\\index.js",["110","111"],[],"import React, { useContext, useState } from 'react';\r\nimport { useLocalState } from '../util/useLocalStorage';\r\nimport { Navigate } from 'react-router-dom';\r\nimport ajax from '../Services/fetchService';\r\nimport { useUser } from '../UserProvider';\r\n\r\nconst PrivateRoute = ({children}) => {\r\n    const user = useUser();\r\n  //  const [jwt,setJwt] = useLocalState(\"\", \"jwt\")\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isValid,setIsValid] = useState(null);\r\n\r\n    if(user){\r\n        ajax(`/api/auth/validate?token=${user.jwt}`,\"GET\",user.jwt)\r\n        .then((isValid) =>{\r\n           setIsValid(isValid);\r\n           setIsLoading(false);\r\n            \r\n        }); \r\n        \r\n    }else{\r\n       return  <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return isLoading ? ( <div>Loading...</div>) : \r\n    isValid === true ? ( children ) :\r\n    (<Navigate to=\"/login\"/>);\r\n     \r\n};\r\n\r\nexport default PrivateRoute;","C:\\CodeInspector\\Git\\front-end\\src\\Dashboard\\index.js",["112"],[],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport StatusBadge from \"../StatusBadge\";\r\nimport { useUser } from \"../UserProvider\";\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const user = useUser();\r\n  const [assignments, setAssignments] = useState(null);\r\n\r\n  useEffect(() => {\r\n    ajax(\"api/assignments\", \"GET\", user.jwt).then((assignmentsData) => {\r\n      setAssignments(assignmentsData);\r\n    });\r\n    if (!user.jwt) navigate(\"/login\");\r\n  }, [user.jwt]);\r\n\r\n  function createAssignment() {\r\n    ajax(\"api/assignments\", \"POST\", user.jwt).then((assignment) => {\r\n      navigate(`/assignments/${assignment.id}`);\r\n      // window.location.href = `/assignments/${assignment.id}`;\r\n    });\r\n  }\r\n  return (\r\n    <div style={{ margin: \"2em\" }}>\r\n      <Row>\r\n        <Col>\r\n          <div\r\n            className=\"d-flex justify-content-end\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              user.setJwt(null);\r\n              navigate(\"/login\");\r\n            }}\r\n          >\r\n            Logout\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"mb-4\">\r\n        <Button size=\"lg\" onClick={() => createAssignment()}>\r\n          Submit New Assignment\r\n        </Button>\r\n      </div>\r\n      {assignments ? (\r\n        <div\r\n          className=\"d-grid gap-5\"\r\n          style={{ gridTemplateColumns: \"repeat(auto-fill,18rem)\" }}\r\n        >\r\n          {assignments.map((assignment) => (\r\n            <Card\r\n              key={assignment.id}\r\n              style={{ width: \"18rem\", height: \"18rem\" }}\r\n            >\r\n              <Card.Body className=\"d-flex flex-column justify-content-around\">\r\n                <Card.Title>Assignment #{assignment.number}</Card.Title>\r\n                <div className=\"d-flex alignitems-start\">\r\n                  <StatusBadge text={assignment.status} />\r\n                </div>\r\n\r\n                <Card.Text style={{ marginTop: \"1em\" }}>\r\n                  <b>Github URL:</b> {assignment.githuburl}\r\n                  <br />\r\n                  <b>Branch:</b> {assignment.branch}\r\n                </Card.Text>\r\n\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={() => {\r\n                    window.location.href = `/assignments/${assignment.id}`;\r\n                  }}\r\n                >\r\n                  Edit\r\n                </Button>\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\AssignmentView\\index.js",["113","114","115","116","117","118"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLocalState } from \"../util/useLocalStorage\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport {\r\n  Badge,\r\n  Button,\r\n  ButtonGroup,\r\n  Col,\r\n  Container,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Form,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport StatusBadge from \"../StatusBadge\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useUser } from \"../UserProvider\";\r\nimport Comment from \"../Comment\";\r\nimport CommentContainer from \"../CommentContainer\";\r\n\r\nconst AssignmentView = () => {\r\n  const user = useUser();\r\n  let navigate = useNavigate();\r\n  const { assignmentId } = useParams();\r\n  const [assignment, setAssignment] = useState({\r\n    branch: \"\",\r\n    githuburl: \"\",\r\n    number: null,\r\n    status: null,\r\n  });\r\n  \r\n  \r\n  const [assignmentEnums, setAssignmentEnums] = useState([]);\r\n  const [assignmentStatuses, setAssignmentStatuses] = useState([]);\r\n  \r\n\r\n  const prevAssignmentValue = useRef(assignment);\r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  function updateAssignment(prop, value) {\r\n    const newAssignment = { ...assignment };\r\n    newAssignment[prop] = value;\r\n    setAssignment(newAssignment);\r\n    //  console.log(assignment)\r\n  }\r\n\r\n  function save(status) {\r\n    if (status && assignment.status !== status) {\r\n      updateAssignment(\"status\", status);\r\n    } else {\r\n      persist();\r\n    }\r\n  }\r\n\r\n  function persist() {\r\n    ajax(`/api/assignments/${assignmentId}`, \"PUT\", user.jwt, assignment).then(\r\n      (assignmentData) => {\r\n        setAssignment(assignmentData);\r\n      }\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (prevAssignmentValue.current.status !== assignment.status) {\r\n      persist();\r\n    }\r\n    prevAssignmentValue.current = assignment;\r\n  }, [assignment]);\r\n  // function save() {\r\n  //   const updatedStatus = assignmentStatuses[1].status;\r\n  //   const updatedAssignment = assignment.status === assignmentStatuses[0].status\r\n  //     ? { ...assignment, status: updatedStatus }\r\n  //     : assignment;\r\n\r\n  //   ajax(`/api/assignments/${id}`, \"PUT\", jwt, updatedAssignment).then(\r\n  //     (assignmentData) => {\r\n  //       setAssignment(assignmentData);\r\n  //     }\r\n  //   );\r\n  // }\r\n\r\n  useEffect(() => {\r\n    ajax(`/api/assignments/${assignmentId}`, \"GET\", user.jwt).then(\r\n      (assignmentsResponse) => {\r\n        let assignmentData = assignmentsResponse.assignment;\r\n        if (assignmentData.branch === null) assignmentData.branch = \"\";\r\n        if (assignmentData.githuburl === null) assignmentData.githuburl = \"\";\r\n        setAssignment(assignmentData);\r\n        setAssignmentEnums(assignmentsResponse.assignmentEnum);\r\n        setAssignmentStatuses(assignmentsResponse.statusEnums);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  // useEffect(() => console.log(assignmentEnums), [assignmentEnums]);\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row className=\"d-flex align-items-center\">\r\n        <Col>\r\n          {assignment.number ? <h1>Assignment {assignment.number}</h1> : <></>}\r\n        </Col>\r\n        <Col>\r\n          <StatusBadge text={assignment.status} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {assignment ? (\r\n        <>\r\n          <Form.Group as={Row} className=\"my-3\" controlId=\"assignmentName\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Assignment Number:\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <DropdownButton\r\n                as={ButtonGroup}\r\n                variant={\"info\"}\r\n                title={\r\n                  assignment.number\r\n                    ? `Assignment ${assignment.number}`\r\n                    : \"Select an Assignment\"\r\n                }\r\n                onSelect={(selectedElement) => {\r\n                  updateAssignment(\"number\", selectedElement);\r\n                }}\r\n              >\r\n                {assignmentEnums.map((assignmentEnum) => (\r\n                  <Dropdown.Item\r\n                    key={assignmentEnum.assignmentNum}\r\n                    eventKey={assignmentEnum.assignmentNum}\r\n                  >\r\n                    {assignmentEnum.assignmentNum}\r\n                  </Dropdown.Item>\r\n                ))}\r\n              </DropdownButton>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} className=\"my-3\" controlId=\"githuburl\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Github URL:\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <Form.Control\r\n                onChange={(e) => updateAssignment(\"githuburl\", e.target.value)}\r\n                type=\"url\"\r\n                placeholder=\"http://github.com/username/repo-name\"\r\n                value={assignment.githuburl}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"branch\">\r\n            <Form.Label column sm=\"3\" md=\"2\">\r\n              Branch :\r\n            </Form.Label>\r\n            <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n              <Form.Control\r\n                onChange={(e) => updateAssignment(\"branch\", e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"example_branch_name\"\r\n                value={assignment.branch}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          {assignment.status === \"Completed\" ? (\r\n            <>\r\n              <Form.Group\r\n                as={Row}\r\n                className=\"d-flex align-items-center mb-3\"\r\n                controlId=\"codeReviewVideoUrl\"\r\n              >\r\n                <Form.Label column sm=\"3\" md=\"2\">\r\n                  Code Review Video URL :\r\n                </Form.Label>\r\n                <Col sm=\"9\" md=\"8\" lg=\"6\">\r\n                  <a\r\n                    href={assignment.codeReviewVideoUrl}\r\n                    style={{ fontWeight: \"bold\" }}\r\n                  >\r\n                    {assignment.codeReviewVideoUrl}\r\n                  </a>\r\n                </Col>\r\n              </Form.Group>\r\n\r\n              <div className=\"d-flex gap-5\">\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={() => navigate(\"/dashboard\")}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </div>\r\n            </>\r\n          ) : assignment.status === \"Pending Submission\" ? (\r\n            <div className=\"d-flex gap-5\">\r\n              <Button onClick={() => save(\"Submitted\")}>\r\n                Submit Assignment\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => navigate(\"/dashboard\")}\r\n              >\r\n                Back\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"d-flex gap-5\">\r\n              <Button onClick={() => save(\"Resubmitted\")}>\r\n                Resubmit Assignment\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => navigate(\"/dashboard\")}\r\n              >\r\n                Back\r\n              </Button>\r\n            </div>\r\n          )}\r\n          <CommentContainer assignmentId={assignmentId} />\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AssignmentView;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\Login\\index.js",["119"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useUser } from \"../UserProvider\";\r\n\r\nconst Login = () => {\r\n  const user = useUser();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (user.jwt) navigate(\"/dashboard\");\r\n  }, [user]);\r\n\r\n  function sendLoginRequest() {\r\n    const reqBody = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    fetch(\"api/auth/login\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(reqBody), // Sending the request body as JSON\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200)\r\n          return Promise.all([response.json(), response.headers]);\r\n        else return Promise.reject(\"Invalid login attempt\");\r\n      })\r\n\r\n      .then(([body, headers]) => {\r\n        user.setJwt(headers.get(\"authorization\"));\r\n      })\r\n      .catch((message) => {\r\n        alert(message);\r\n      });\r\n  }\r\n  // The empty array means this effect runs only once when the component mounts\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row className=\"justify-content-center mt-5\">\r\n          <Col md=\"8\" lg=\"6\">\r\n            <Form.Group className=\"mb-3\" controlId=\"username\">\r\n              <Form.Label className=\"fs-4\">Username</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                size=\"lg\"\r\n                placeholder=\"joe@gmail.com\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\" lg=\"6\">\r\n            <Form.Group className=\"mb-3\" controlId=\"password\">\r\n              <Form.Label className=\"fs-4\">Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                size=\"lg\"\r\n                placeholder=\"Type in your password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className=\"justify-content-center\">\r\n          <Col\r\n            md=\"8\"\r\n            lg=\"6\"\r\n            className=\"mt-2 d-flex flex-column gap-5 flex-md-row justify-content-md-between\"\r\n          >\r\n            <Button\r\n              id=\"submit\"\r\n              type=\"button\"\r\n              size=\"lg\"\r\n              onClick={() => sendLoginRequest()}\r\n            >\r\n              Login\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              type=\"button\"\r\n              size=\"lg\"\r\n              onClick={() => {\r\n                navigate(\"/\");\r\n              }}\r\n            >\r\n              Exit\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\CodeReviewerDashboard\\index.js",["120"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport {  Button, Card, Col, Container, Row } from \"react-bootstrap\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport StatusBadge from \"../StatusBadge\";\r\nimport {  useUser } from \"../UserProvider\";\r\n\r\nconst CodeReviewerDashboard = () => {\r\n  const navigate = useNavigate();\r\n  const user = useUser();\r\n  const [assignments, setAssignments] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    if(!user.jwt)navigate(\"/login\");\r\n  })\r\n\r\n  function editReview(assignment){\r\n    window.location.href=`/assignments/${assignment.id}`\r\n  }\r\n\r\n  function claimAssignment(assignment) {\r\n    const decodedJWT = jwt_decode(user.jwt);\r\n    const codeReviewer = {\r\n      username: decodedJWT.sub,\r\n    };\r\n\r\n    assignment.codeReviewer = codeReviewer;\r\n    //  todo : dont hardcode this status\r\n    assignment.status = \"In Review\";\r\n\r\n    ajax(`/api/assignments/${assignment.id}`, \"PUT\", user.jwt, assignment).then(\r\n      (updatedAssignment) => {\r\n        const assignmentsCopy = [...assignments];\r\n        const i = assignmentsCopy.findIndex((a) => a.id === assignment.id);\r\n        assignmentsCopy[i] = updatedAssignment;\r\n        setAssignments(assignmentsCopy);\r\n      }\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    ajax(\"api/assignments\", \"GET\", user.jwt).then((assignmentsData) => {\r\n      setAssignments(assignmentsData);\r\n    });\r\n  }, [user.jwt]);\r\n\r\n  function createAssignment() {\r\n    ajax(\"api/assignments\", \"POST\", user.jwt).then((assignment) => {\r\n     // navigate(`/assignments/${assignment.id}`);\r\n       window.location.href = `/assignments/${assignment.id}`;\r\n    });\r\n  }\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <div\r\n            className=\"d-flex justify-content-end\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              user.setJwt(null);\r\n              navigate(\"/login\");\r\n            }}\r\n          >\r\n            Logout\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <h1>Code Reviewer Dashboard</h1>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"assignment-wrapper  in-review\">\r\n        <div className=\"h3 px-2 assignment-wrapper-title\">In Review</div>\r\n        {assignments &&\r\n        assignments.filter((assignment) => assignment.status === \"In Review\")\r\n          .length > 0 ? (\r\n          <div\r\n            className=\"d-grid gap-5\"\r\n            style={{ gridTemplateColumns: \"repeat(auto-fill,18rem)\" }}\r\n          >\r\n            {assignments\r\n              .filter((assignment) => assignment.status === \"In Review\" || assignment.status === \"Resubmitted\")\r\n              .map((assignment) => (\r\n                <Card\r\n                  key={assignment.id}\r\n                  style={{ width: \"18rem\", height: \"18rem\" }}\r\n                >\r\n                  <Card.Body className=\"d-flex flex-column justify-content-around\">\r\n                    <Card.Title>Assignment #{assignment.number}</Card.Title>\r\n                    <div className=\"d-flex alignitems-start\">\r\n                    <StatusBadge text={assignment.status}/>\r\n                    </div>\r\n\r\n                    <Card.Text style={{ marginTop: \"1em\" }}>\r\n                      <b>Github URL:</b> {assignment.githuburl}\r\n                      <br />\r\n                      <b>Branch:</b> {assignment.branch}\r\n                    </Card.Text>\r\n\r\n                    <Button\r\n                      variant=\"secondary\"\r\n                      onClick={() => {\r\n                        editReview(assignment);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              ))}\r\n          </div>\r\n        ) : (\r\n          <div>No assignments found</div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"assignment-wrapper  submitted\">\r\n        <div className=\"h3 px-2 assignment-wrapper-title\">Awaiting Review</div>\r\n        {assignments &&\r\n        assignments.filter((assignment) => assignment.status === \"Submitted\" || assignment.status === \"Resubmitted\")\r\n          .length > 0 ? (\r\n          <div\r\n            className=\"d-grid gap-5\"\r\n            style={{ gridTemplateColumns: \"repeat(auto-fill,18rem)\" }}\r\n          >\r\n            {assignments\r\n              .filter((assignment) => assignment.status === \"Submitted\" || assignment.status === \"Resubmitted\")\r\n              .sort((a,b)=> {\r\n                if(a.status === \"Resubmitted\") return -1;\r\n                else return 1;\r\n              })\r\n              .map((assignment) => (\r\n                <Card\r\n                  key={assignment.id}\r\n                  style={{ width: \"18rem\", height: \"18rem\" }}\r\n                >\r\n                  <Card.Body className=\"d-flex flex-column justify-content-around\">\r\n                    <Card.Title>Assignment #{assignment.number}</Card.Title>\r\n                    <div className=\"d-flex alignitems-start\">\r\n                    <StatusBadge text={assignment.status}/>\r\n                    </div>\r\n\r\n                    <Card.Text style={{ marginTop: \"1em\" }}>\r\n                      <b>Github URL:</b> {assignment.githuburl}\r\n                      <br />\r\n                      <b>Branch:</b> {assignment.branch}\r\n                    </Card.Text>\r\n\r\n                    <Button\r\n                      variant=\"secondary\"\r\n                      onClick={() => {\r\n                        claimAssignment(assignment);\r\n                      }}\r\n                    >\r\n                      Claim\r\n                    </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              ))}\r\n          </div>\r\n        ) : (\r\n          <div>No assignments found</div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"assignment-wrapper  needs-update\">\r\n        <div className=\"h3 px-2 assignment-wrapper-title\">Needs Update</div>\r\n        {assignments &&\r\n        assignments.filter((assignment) => assignment.status === \"Needs Update\")\r\n          .length > 0 ? (\r\n          <div\r\n            className=\"d-grid gap-5\"\r\n            style={{ gridTemplateColumns: \"repeat(auto-fill,18rem)\" }}\r\n          >\r\n            {assignments\r\n              .filter((assignment) => assignment.status === \"Needs Update\")\r\n              .map((assignment) => (\r\n                <Card\r\n                  key={assignment.id}\r\n                  style={{ width: \"18rem\", height: \"18rem\" }}\r\n                >\r\n                  <Card.Body className=\"d-flex flex-column justify-content-around\">\r\n                    <Card.Title>Assignment #{assignment.number}</Card.Title>\r\n                    <div className=\"d-flex alignitems-start\">\r\n                    <StatusBadge text={assignment.status}/>\r\n                    </div>\r\n\r\n                    <Card.Text style={{ marginTop: \"1em\" }}>\r\n                      <b>Github URL:</b> {assignment.githuburl}\r\n                      <br />\r\n                      <b>Branch:</b> {assignment.branch}\r\n                    </Card.Text>\r\n\r\n                    <Button\r\n                      variant=\"secondary\"\r\n                      onClick={() => {\r\n                        window.location.href=`/assignments/${assignment.id}`;\r\n                      }}\r\n                    >\r\n                      View\r\n                    </Button>\r\n                  </Card.Body>\r\n                </Card>\r\n              ))}\r\n          </div>\r\n        ) : (\r\n          <div>No assignments found</div>\r\n        )}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CodeReviewerDashboard;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\Services\\fetchService.js",["121"],[],"import { useLocalState } from \"../util/useLocalStorage\";\r\n\r\nfunction ajax(url, requestMethod, jwt, requestBody) {\r\n  const fetchData = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    method: requestMethod,\r\n  };\r\n  if (jwt) {\r\n    fetchData.headers.Authorization = `Bearer ${jwt}`;\r\n  }\r\n  if (requestBody) {\r\n    fetchData.body = JSON.stringify(requestBody);\r\n  }\r\n\r\n  return fetch(url, fetchData).then((response) => {\r\n    if (response.status === 200) return response.json();\r\n  });\r\n}\r\n\r\nexport default ajax;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\StatusBadge\\index.js",[],[],"C:\\CodeInspector\\Git\\front-end\\src\\UserProvider\\index.js",[],[],"C:\\CodeInspector\\Git\\front-end\\src\\Comment\\index.js",["122"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useUser } from \"../UserProvider\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\nconst Comment = (props) => {\r\n  const user = useUser();\r\n  const decodedJwt = jwt_decode(user.jwt);\r\n  const { id, createdDate, createdBy, text } = props.commentData;\r\n  const { emitEditComment, emitDeleteComment } = props;\r\n  const [commentRelativeTime, setCommentRelativeTime] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    updateCommentRelativeTime();\r\n  }, [createdDate]);\r\n\r\n  function updateCommentRelativeTime() {\r\n    if (createdDate) {\r\n      dayjs.extend(relativeTime);\r\n\r\n      if (typeof createdDate === \"string\")\r\n        setCommentRelativeTime(dayjs(createdDate).fromNow());\r\n      else {\r\n        setCommentRelativeTime(createdDate.fromNow());\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"comment-bubble\">\r\n        <div className=\"d-flex gap-5\" style={{ fontWeight: \"bold\" }}>\r\n          <div>\r\n            {createdBy.name}:{\"  \"}\r\n          </div>\r\n          {decodedJwt.sub === createdBy.username ? (\r\n            <>\r\n              {\" \"}\r\n              <div\r\n                onClick={() => emitEditComment(id)}\r\n                style={{ cursor: \"pointer\", color: \"blue\" }}\r\n              >\r\n                Edit\r\n              </div>\r\n              <div\r\n                onClick={() => emitDeleteComment(id)}\r\n                style={{ cursor: \"pointer\", color: \"red\" }}\r\n              >\r\n                Delete\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n        <div>{text}</div>\r\n      </div>\r\n      <div\r\n        style={{ marginTop: \"-1.25em\", marginLeft: \"1.4em\", fontSize: \"12px\" }}\r\n      >\r\n        {commentRelativeTime ? `Posted ${commentRelativeTime}` : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","C:\\CodeInspector\\Git\\front-end\\src\\CommentContainer\\index.js",["123"],[],"import dayjs from \"dayjs\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport Comment from \"../Comment\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport { useUser } from \"../UserProvider\";\r\nimport { useInterval } from \"../util/useInterval\";\r\n\r\nconst CommentContainer = (props) => {\r\n  const { assignmentId } = props;\r\n  const user = useUser();\r\n\r\n  const emptyComment = {\r\n    id: null,\r\n    text: \"\",\r\n    assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\r\n    user: user.jwt,\r\n    createdDate: null,\r\n  };\r\n\r\n  const [comment, setComment] = useState(emptyComment);\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useInterval(() => {\r\n    updateCommentTimeDisplay();\r\n  }, 1000 * 5);\r\n  function updateCommentTimeDisplay() {\r\n    const commentsCopy = [...comments];\r\n    commentsCopy.forEach(\r\n      (comment) => (comment.createdDate = dayjs(comment.createdDate))\r\n    );\r\n    formatComments(commentsCopy);\r\n  }\r\n\r\n  function handleEditComment(commentId) {\r\n    const i = comments.findIndex((comment) => comment.id === commentId);\r\n    const commentCopy = {\r\n      id: comments[i].id,\r\n      text: comments[i].text,\r\n      assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\r\n      user: user.jwt,\r\n      createdDate: comments[i].createdDate,\r\n    };\r\n    setComment(commentCopy);\r\n  }\r\n\r\n  function handleDeleteComment(commentId) {\r\n    // TODO: send DELETE request to server\r\n    ajax(`/api/comments/${commentId}`, \"delete\", user.jwt).then((msg) => {\r\n      const commentsCopy = [...comments];\r\n      const i = commentsCopy.findIndex((comment) => comment.id === commentId);\r\n      commentsCopy.splice(i, 1);\r\n      formatComments(commentsCopy);\r\n    });\r\n  }\r\n  function formatComments(commentsCopy) {\r\n    commentsCopy.forEach((comment) => {\r\n      if (typeof comment.createDate === \"string\") {\r\n        comment.createDate = dayjs(comment.createDate);\r\n      }\r\n    });\r\n    setComments(commentsCopy);\r\n  }\r\n\r\n  useEffect(() => {\r\n    ajax(\r\n      `/api/comments?assignmentId=${assignmentId}`,\r\n      \"get\",\r\n      user.jwt,\r\n      null\r\n    ).then((commentsData) => {\r\n      formatComments(commentsData);\r\n    });\r\n  }, []);\r\n\r\n  function updateComment(value) {\r\n    const commentCopy = { ...comment };\r\n    commentCopy.text = value;\r\n    setComment(commentCopy);\r\n  }\r\n  function submitComment() {\r\n    // if (\r\n    //   typeof comment.createdDate === \"object\" &&\r\n    //   comment.createdDate != null\r\n    // ) {\r\n    //   comment.createdDate = comment.createdDate.toDate();\r\n    // }\r\n    if (comment.id) {\r\n      ajax(`/api/comments/${comment.id}`, \"put\", user.jwt, comment).then(\r\n        (d) => {\r\n          const commentsCopy = [...comments];\r\n          const i = commentsCopy.findIndex((comment) => comment.id === d.id);\r\n          commentsCopy[i] = d;\r\n          formatComments(commentsCopy);\r\n\r\n          setComment(emptyComment);\r\n        }\r\n      );\r\n    } else {\r\n      ajax(\"/api/comments\", \"post\", user.jwt, comment).then((d) => {\r\n        const commentsCopy = [...comments];\r\n        commentsCopy.push(d);\r\n        formatComments(commentsCopy);\r\n        setComment(emptyComment);\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"mt-5\">\r\n        <h4>Comments</h4>\r\n      </div>\r\n      <Row>\r\n        <Col lg=\"8\" md=\"10\" sm=\"12\">\r\n          <textarea\r\n            style={{ width: \"100%\", borderRadius: \"0.25em\" }}\r\n            onChange={(e) => updateComment(e.target.value)}\r\n            value={comment.text}\r\n          ></textarea>\r\n        </Col>\r\n      </Row>\r\n      <Button onClick={() => submitComment()}>Post Comment</Button>\r\n      <div className=\"mt-5\">\r\n        {comments.map((comment) => (\r\n          <Comment\r\n            key={comment.id}\r\n            commentData={comment}\r\n            emitDeleteComment={handleDeleteComment}\r\n            emitEditComment={handleEditComment}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentContainer;","C:\\CodeInspector\\Git\\front-end\\src\\util\\useInterval.js",[],[],{"ruleId":"124","severity":1,"message":"125","line":24,"column":5,"nodeType":"126","endLine":24,"endColumn":15,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":19},{"ruleId":"128","severity":1,"message":"132","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":8},{"ruleId":"128","severity":1,"message":"133","line":8,"column":3,"nodeType":"130","messageId":"131","endLine":8,"endColumn":14},{"ruleId":"128","severity":1,"message":"134","line":11,"column":3,"nodeType":"130","messageId":"131","endLine":11,"endColumn":11},{"ruleId":"128","severity":1,"message":"135","line":12,"column":3,"nodeType":"130","messageId":"131","endLine":12,"endColumn":17},{"ruleId":"128","severity":1,"message":"136","line":32,"column":10,"nodeType":"130","messageId":"131","endLine":32,"endColumn":13},{"ruleId":"128","severity":1,"message":"137","line":32,"column":15,"nodeType":"130","messageId":"131","endLine":32,"endColumn":21},{"ruleId":"128","severity":1,"message":"138","line":33,"column":10,"nodeType":"130","messageId":"131","endLine":33,"endColumn":25},{"ruleId":"124","severity":1,"message":"139","line":66,"column":6,"nodeType":"126","endLine":66,"endColumn":18,"suggestions":"140"},{"ruleId":"124","severity":1,"message":"141","line":89,"column":6,"nodeType":"126","endLine":89,"endColumn":8,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"143","line":33,"column":9,"nodeType":"130","messageId":"131","endLine":33,"endColumn":22},{"ruleId":"128","severity":1,"message":"144","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":27},{"ruleId":"128","severity":1,"message":"145","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":23},{"ruleId":"124","severity":1,"message":"146","line":19,"column":6,"nodeType":"126","endLine":19,"endColumn":16,"suggestions":"147"},{"ruleId":"128","severity":1,"message":"145","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":23},{"ruleId":"128","severity":1,"message":"132","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":8},{"ruleId":"128","severity":1,"message":"148","line":19,"column":8,"nodeType":"130","messageId":"131","endLine":19,"endColumn":15},{"ruleId":"128","severity":1,"message":"149","line":35,"column":10,"nodeType":"130","messageId":"131","endLine":35,"endColumn":28},{"ruleId":"124","severity":1,"message":"139","line":76,"column":6,"nodeType":"126","endLine":76,"endColumn":18,"suggestions":"150"},{"ruleId":"124","severity":1,"message":"151","line":101,"column":6,"nodeType":"126","endLine":101,"endColumn":8,"suggestions":"152"},{"ruleId":"124","severity":1,"message":"146","line":15,"column":6,"nodeType":"126","endLine":15,"endColumn":12,"suggestions":"153"},{"ruleId":"128","severity":1,"message":"154","line":48,"column":12,"nodeType":"130","messageId":"131","endLine":48,"endColumn":28},{"ruleId":"128","severity":1,"message":"145","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":23},{"ruleId":"124","severity":1,"message":"155","line":16,"column":6,"nodeType":"126","endLine":16,"endColumn":19,"suggestions":"156"},{"ruleId":"124","severity":1,"message":"151","line":74,"column":6,"nodeType":"126","endLine":74,"endColumn":8,"suggestions":"157"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRolesFromJWT'. Either include it or remove the dependency array.","ArrayExpression",["158"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","'ButtonGroup' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'jwt' is assigned a value but never used.","'setJwt' is assigned a value but never used.","'assignmentEnums' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'persist'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has missing dependencies: 'id' and 'user.jwt'. Either include them or remove the dependency array.",["160"],"'registerData1' is assigned a value but never used.","'useContext' is defined but never used.","'useLocalState' is defined but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["161"],"'Comment' is defined but never used.","'assignmentStatuses' is assigned a value but never used.",["162"],"React Hook useEffect has missing dependencies: 'assignmentId' and 'user.jwt'. Either include them or remove the dependency array.",["163"],["164"],"'createAssignment' is defined but never used.","React Hook useEffect has a missing dependency: 'updateCommentRelativeTime'. Either include it or remove the dependency array.",["165"],["166"],{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"169","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"176","fix":"182"},"Update the dependencies array to be: [getRolesFromJWT, user.jwt]",{"range":"183","text":"184"},"Update the dependencies array to be: [assignment, persist]",{"range":"185","text":"186"},"Update the dependencies array to be: [id, user.jwt]",{"range":"187","text":"188"},"Update the dependencies array to be: [navigate, user.jwt]",{"range":"189","text":"190"},{"range":"191","text":"186"},"Update the dependencies array to be: [assignmentId, user.jwt]",{"range":"192","text":"193"},"Update the dependencies array to be: [navigate, user]",{"range":"194","text":"195"},"Update the dependencies array to be: [createdDate, updateCommentRelativeTime]",{"range":"196","text":"197"},{"range":"198","text":"193"},[873,883],"[getRolesFromJWT, user.jwt]",[1835,1847],"[assignment, persist]",[2775,2777],"[id, user.jwt]",[635,645],"[navigate, user.jwt]",[1802,1814],[2780,2782],"[assignmentId, user.jwt]",[507,513],"[navigate, user]",[578,591],"[createdDate, updateCommentRelativeTime]",[2234,2236]]